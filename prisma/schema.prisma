// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  createdAt DateTime @default(now())

  // Relationships
  posts           Post[]
  comments        Comment[]
  votes           Vote[]
  CommunityMember CommunityMember[]
}

model Community {
  id          String   @id @default(uuid())
  name        String   @unique
  displayName String
  description String?
  iconUrl     String?
  bannerUrl   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  topics  CommunityTopic[]
  posts   Post[]
  members CommunityMember[]
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String?
  mediaUrl  String?
  type      PostType @default(TEXT)
  upvotes   Int      @default(0)
  createdAt DateTime @default(now())

  // Relationships
  authorId    String
  author      User      @relation(fields: [authorId], references: [id])
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  comments    Comment[]
  Vote        Vote[]

  @@index([communityId, createdAt])
  @@index([upvotes])
}

enum PostType {
  TEXT
  IMAGE
  VIDEO
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  // Relationships
  authorId String
  author   User   @relation(fields: [authorId], references: [id])
  postId   String
  post     Post   @relation(fields: [postId], references: [id])
}

model Vote {
  id       String  @id @default(uuid())
  isUpvote Boolean // true=upvote, false=downvote

  // Relationships
  userId String
  user   User   @relation(fields: [userId], references: [id])
  postId String
  post   Post   @relation(fields: [postId], references: [id])

  @@unique([userId, postId])
}

model Topic {
  id          String           @id @default(uuid())
  name        String           @unique
  communities CommunityTopic[]
}

model CommunityTopic {
  communityId String
  community   Community @relation(fields: [communityId], references: [id])
  topicId     String
  topic       Topic     @relation(fields: [topicId], references: [id])

  @@id([communityId, topicId])
}

model CommunityMember {
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  communityId String
  community   Community  @relation(fields: [communityId], references: [id])
  role        MemberRole @default(MEMBER)
  joinedAt    DateTime   @default(now())

  @@id([userId, communityId])
}

enum MemberRole {
  MEMBER
  MODERATOR
  ADMIN
}
